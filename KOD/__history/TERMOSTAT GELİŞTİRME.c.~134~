#include <16f877a.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <lcd.c>

#use delay(clock=4000000)
#fuses XT, NOWDT, NOPUT, NOLVP, NOCPD, NOPROTECT, NODEBUG, NOBROWNOUT, NOWRT

#use fast_io(a)
#use fast_io(b)
#use fast_io(d)

#define yukari pin_d0
#define asagi  pin_d1
#define use_portb_lcd TRUE
#define led pin_c0

// Steinhart-Hart denklemi için sabitler
#define A 0.001129148
#define B 0.000234125
#define C 0.0000000876741

// Fonksiyon prototipi
float convert_to_temperature(float resistance);

void main()
{
    setup_psp(PSP_DISABLED);
    setup_timer_1(T1_DISABLED);
    setup_CCP1(CCP_OFF);
    setup_CCP2(CCP_OFF);

    set_tris_a(0x20); // Port A konfigürasyonu
    set_tris_b(0x00); // Port B konfigürasyonu
    set_tris_d(0xFF); // Port D konfigürasyonu
    set_tris_c(0x00); // Port C konfigürasyonu

    lcd_init();
    setup_adc(adc_clock_div_32); 
    setup_adc_ports(ALL_ANALOG); // AN4 için ADC ayarlarý

    set_adc_channel(4); 
    delay_us(20);

    printf(lcd_putc,"\fSicaklik=");

    float sicaklik;
    float resistance;
    
    while(true)
    {
        // ADC'den direnç ölçümü al
        resistance = read_adc();
        // Dirençten sýcaklýðý hesapla
        sicaklik = convert_to_temperature(resistance);
        
        lcd_gotoxy(10,1);
        printf(lcd_putc,"%f C", sicaklik);

        if (sicaklik <= ayar) 
        {
            output_high(led); // Led yakýlýr
        } 
        else 
        {
            output_low(led); // Led söndürülür
        }
    }
}

// Dirençten sýcaklýðý hesapla
float convert_to_temperature(float resistance)
{
    // Steinhart-Hart denklemiyle sýcaklýðý hesapla
    float kelvin = 1 / (A + B * log(resistance) + C * pow(log(resistance), 3));
    float celsius = kelvin - 273.15; // Kelvin'i Celsius'a dönüþtür
    return celsius;
}

