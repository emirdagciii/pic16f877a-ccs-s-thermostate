CCS PCM C Compiler, Version 5.015, 5967               17-May-24 21:57

               Filename:   C:\Users\Hp\Desktop\TERMOSTAT\KOD\TERMOSTAT GELÝÞTÝRME.lst

               ROM used:   1859 words (23%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           45 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   609
0003:  NOP
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,29
0005:  DATA E9,31
0006:  DATA E1,35
0007:  DATA EC,34
0008:  DATA EB,1E
0009:  DATA 00,00
000A:  DATA C1,2C
000B:  DATA 41,29
000C:  DATA BD,12
000D:  DATA 64,10
000E:  DATA 43,10
000F:  DATA 00,00
0010:  DATA C1,2C
0011:  DATA 41,29
0012:  DATA BD,12
0013:  DATA 64,10
0014:  DATA 43,10
0015:  DATA 00,00
*
00F9:  MOVF   0B,W
00FA:  MOVWF  2E
00FB:  BCF    0B.7
00FC:  BSF    03.5
00FD:  BSF    03.6
00FE:  BSF    0C.7
00FF:  BSF    0C.0
0100:  NOP
0101:  NOP
0102:  BCF    03.5
0103:  BCF    03.6
0104:  BTFSC  2E.7
0105:  BSF    0B.7
0106:  BSF    03.6
0107:  MOVF   0C,W
0108:  ANDLW  7F
0109:  BTFSC  03.2
010A:  GOTO   14D
010B:  BCF    03.6
010C:  MOVWF  2E
010D:  BSF    03.6
010E:  MOVF   0D,W
010F:  BCF    03.6
0110:  MOVWF  2F
0111:  BSF    03.6
0112:  MOVF   0F,W
0113:  BCF    03.6
0114:  MOVWF  30
0115:  MOVF   2E,W
0116:  MOVWF  3B
0117:  CALL   0CD
0118:  MOVF   2F,W
0119:  BSF    03.6
011A:  MOVWF  0D
011B:  BCF    03.6
011C:  MOVF   30,W
011D:  BSF    03.6
011E:  MOVWF  0F
011F:  BCF    03.6
0120:  MOVF   0B,W
0121:  MOVWF  31
0122:  BCF    0B.7
0123:  BSF    03.5
0124:  BSF    03.6
0125:  BSF    0C.7
0126:  BSF    0C.0
0127:  NOP
0128:  NOP
0129:  BCF    03.5
012A:  BCF    03.6
012B:  BTFSC  31.7
012C:  BSF    0B.7
012D:  BSF    03.6
012E:  RLF    0C,W
012F:  RLF    0E,W
0130:  ANDLW  7F
0131:  BTFSC  03.2
0132:  GOTO   14D
0133:  BCF    03.6
0134:  MOVWF  2E
0135:  BSF    03.6
0136:  MOVF   0D,W
0137:  BCF    03.6
0138:  MOVWF  2F
0139:  BSF    03.6
013A:  MOVF   0F,W
013B:  BCF    03.6
013C:  MOVWF  30
013D:  MOVF   2E,W
013E:  MOVWF  3B
013F:  CALL   0CD
0140:  MOVF   2F,W
0141:  BSF    03.6
0142:  MOVWF  0D
0143:  BCF    03.6
0144:  MOVF   30,W
0145:  BSF    03.6
0146:  MOVWF  0F
0147:  INCF   0D,F
0148:  BTFSC  03.2
0149:  INCF   0F,F
014A:  BCF    03.6
014B:  GOTO   0F9
014C:  BSF    03.6
014D:  BCF    03.6
014E:  BCF    0A.3
014F:  BCF    0A.4
0150:  GOTO   649 (RETURN)
0151:  MOVF   0B,W
0152:  MOVWF  2F
0153:  BCF    0B.7
0154:  BSF    03.5
0155:  BSF    03.6
0156:  BSF    0C.7
0157:  BSF    0C.0
0158:  NOP
0159:  NOP
015A:  BCF    03.5
015B:  BCF    03.6
015C:  BTFSC  2F.7
015D:  BSF    0B.7
015E:  BTFSC  03.0
015F:  GOTO   188
0160:  BSF    03.6
0161:  MOVF   0C,W
0162:  ANDLW  7F
0163:  BCF    03.6
0164:  MOVWF  2F
0165:  BSF    03.6
0166:  MOVF   0D,W
0167:  BCF    03.6
0168:  MOVWF  30
0169:  BSF    03.6
016A:  MOVF   0F,W
016B:  BCF    03.6
016C:  MOVWF  31
016D:  MOVF   2F,W
016E:  MOVWF  3B
016F:  CALL   0CD
0170:  MOVF   30,W
0171:  BSF    03.6
0172:  MOVWF  0D
0173:  BCF    03.6
0174:  MOVF   31,W
0175:  BSF    03.6
0176:  MOVWF  0F
0177:  BCF    03.6
0178:  MOVF   0B,W
0179:  MOVWF  32
017A:  BCF    0B.7
017B:  BSF    03.5
017C:  BSF    03.6
017D:  BSF    0C.7
017E:  BSF    0C.0
017F:  NOP
0180:  NOP
0181:  BCF    03.5
0182:  BCF    03.6
0183:  BTFSC  32.7
0184:  BSF    0B.7
0185:  DECFSZ 2E,F
0186:  GOTO   188
0187:  GOTO   1A7
0188:  BSF    03.6
0189:  RLF    0C,W
018A:  RLF    0E,W
018B:  ANDLW  7F
018C:  BCF    03.6
018D:  MOVWF  2F
018E:  BSF    03.6
018F:  MOVF   0D,W
0190:  BCF    03.6
0191:  MOVWF  30
0192:  BSF    03.6
0193:  MOVF   0F,W
0194:  BCF    03.6
0195:  MOVWF  31
0196:  MOVF   2F,W
0197:  MOVWF  3B
0198:  CALL   0CD
0199:  MOVF   30,W
019A:  BSF    03.6
019B:  MOVWF  0D
019C:  BCF    03.6
019D:  MOVF   31,W
019E:  BSF    03.6
019F:  MOVWF  0F
01A0:  INCF   0D,F
01A1:  BTFSC  03.2
01A2:  INCF   0F,F
01A3:  BCF    03.0
01A4:  BCF    03.6
01A5:  DECFSZ 2E,F
01A6:  GOTO   151
01A7:  RETURN
01A8:  MOVF   35,W
01A9:  CLRF   78
01AA:  SUBWF  34,W
01AB:  BTFSC  03.0
01AC:  GOTO   1B0
01AD:  MOVF   34,W
01AE:  MOVWF  77
01AF:  GOTO   1BC
01B0:  CLRF   77
01B1:  MOVLW  08
01B2:  MOVWF  36
01B3:  RLF    34,F
01B4:  RLF    77,F
01B5:  MOVF   35,W
01B6:  SUBWF  77,W
01B7:  BTFSC  03.0
01B8:  MOVWF  77
01B9:  RLF    78,F
01BA:  DECFSZ 36,F
01BB:  GOTO   1B3
01BC:  RETURN
01BD:  MOVLW  20
01BE:  BTFSS  2F.4
01BF:  MOVLW  30
01C0:  MOVWF  30
01C1:  MOVF   2E,W
01C2:  MOVWF  77
01C3:  BTFSS  2E.7
01C4:  GOTO   1CD
01C5:  COMF   77,F
01C6:  INCF   77,F
01C7:  MOVF   77,W
01C8:  MOVWF  2E
01C9:  MOVLW  2D
01CA:  MOVWF  30
01CB:  BSF    2F.7
01CC:  BSF    2F.0
01CD:  MOVF   2E,W
01CE:  MOVWF  34
01CF:  MOVLW  64
01D0:  MOVWF  35
01D1:  CALL   1A8
01D2:  MOVF   77,W
01D3:  MOVWF  2E
01D4:  MOVLW  30
01D5:  ADDWF  78,W
01D6:  MOVWF  31
01D7:  MOVF   2E,W
01D8:  MOVWF  34
01D9:  MOVLW  0A
01DA:  MOVWF  35
01DB:  CALL   1A8
01DC:  MOVLW  30
01DD:  ADDWF  77,W
01DE:  MOVWF  33
01DF:  MOVLW  30
01E0:  ADDWF  78,W
01E1:  MOVWF  32
01E2:  MOVF   30,W
01E3:  MOVWF  77
01E4:  MOVLW  30
01E5:  SUBWF  31,W
01E6:  BTFSC  03.2
01E7:  GOTO   1EC
01E8:  BSF    2F.1
01E9:  BTFSC  2F.7
01EA:  BSF    2F.2
01EB:  GOTO   200
01EC:  MOVF   30,W
01ED:  MOVWF  31
01EE:  MOVLW  20
01EF:  MOVWF  30
01F0:  MOVLW  30
01F1:  SUBWF  32,W
01F2:  BTFSC  03.2
01F3:  GOTO   1F8
01F4:  BSF    2F.0
01F5:  BTFSC  2F.7
01F6:  BSF    2F.1
01F7:  GOTO   200
01F8:  BTFSS  03.2
01F9:  BSF    2F.0
01FA:  BTFSS  03.2
01FB:  GOTO   200
01FC:  MOVF   31,W
01FD:  MOVWF  32
01FE:  MOVLW  20
01FF:  MOVWF  31
0200:  BTFSC  2F.2
0201:  GOTO   207
0202:  BTFSC  2F.1
0203:  GOTO   20A
0204:  BTFSC  2F.0
0205:  GOTO   20D
0206:  GOTO   210
0207:  MOVF   30,W
0208:  MOVWF  3B
0209:  CALL   0CD
020A:  MOVF   31,W
020B:  MOVWF  3B
020C:  CALL   0CD
020D:  MOVF   32,W
020E:  MOVWF  3B
020F:  CALL   0CD
0210:  MOVF   33,W
0211:  MOVWF  3B
0212:  CALL   0CD
0213:  RETURN
0214:  MOVLW  8E
0215:  MOVWF  77
0216:  MOVF   2F,W
0217:  MOVWF  78
0218:  MOVF   2E,W
0219:  MOVWF  79
021A:  CLRF   7A
021B:  MOVF   78,F
021C:  BTFSS  03.2
021D:  GOTO   228
021E:  MOVF   79,W
021F:  MOVWF  78
0220:  CLRF   79
0221:  MOVLW  08
0222:  SUBWF  77,F
0223:  MOVF   78,F
0224:  BTFSS  03.2
0225:  GOTO   228
0226:  CLRF   77
0227:  GOTO   230
0228:  BCF    03.0
0229:  BTFSC  78.7
022A:  GOTO   22F
022B:  RLF    79,F
022C:  RLF    78,F
022D:  DECF   77,F
022E:  GOTO   228
022F:  BCF    78.7
0230:  BCF    0A.3
0231:  BCF    0A.4
0232:  GOTO   6B6 (RETURN)
0233:  MOVF   3B,W
0234:  BTFSC  03.2
0235:  GOTO   2A3
0236:  MOVWF  43
0237:  MOVF   3F,W
0238:  BTFSC  03.2
0239:  GOTO   2A3
023A:  ADDWF  43,F
023B:  BTFSC  03.0
023C:  GOTO   244
023D:  MOVLW  7F
023E:  SUBWF  43,F
023F:  BTFSS  03.0
0240:  GOTO   2A3
0241:  BTFSC  03.2
0242:  GOTO   2A3
0243:  GOTO   248
0244:  MOVLW  81
0245:  ADDWF  43,F
0246:  BTFSC  03.0
0247:  GOTO   2A3
0248:  MOVF   43,W
0249:  MOVWF  77
024A:  CLRF   78
024B:  CLRF   79
024C:  CLRF   7A
024D:  MOVF   3C,W
024E:  MOVWF  47
024F:  BSF    47.7
0250:  MOVF   3D,W
0251:  MOVWF  46
0252:  MOVF   3E,W
0253:  MOVWF  45
0254:  MOVLW  18
0255:  MOVWF  43
0256:  CLRF   44
0257:  BTFSS  45.0
0258:  GOTO   271
0259:  MOVF   42,W
025A:  ADDWF  7A,F
025B:  BTFSS  03.0
025C:  GOTO   263
025D:  INCF   79,F
025E:  BTFSS  03.2
025F:  GOTO   263
0260:  INCF   78,F
0261:  BTFSC  03.2
0262:  BSF    44.7
0263:  MOVF   41,W
0264:  ADDWF  79,F
0265:  BTFSS  03.0
0266:  GOTO   26A
0267:  INCF   78,F
0268:  BTFSC  03.2
0269:  BSF    44.7
026A:  MOVF   40,W
026B:  MOVWF  3D
026C:  BSF    3D.7
026D:  MOVF   3D,W
026E:  ADDWF  78,F
026F:  BTFSC  03.0
0270:  BSF    44.7
0271:  RLF    44,F
0272:  RRF    78,F
0273:  RRF    79,F
0274:  RRF    7A,F
0275:  RRF    47,F
0276:  RRF    46,F
0277:  RRF    45,F
0278:  BCF    03.0
0279:  DECFSZ 43,F
027A:  GOTO   256
027B:  MOVLW  01
027C:  ADDWF  77,F
027D:  BTFSC  03.0
027E:  GOTO   2A3
027F:  BTFSC  78.7
0280:  GOTO   288
0281:  RLF    47,F
0282:  RLF    7A,F
0283:  RLF    79,F
0284:  RLF    78,F
0285:  DECF   77,F
0286:  BTFSC  03.2
0287:  GOTO   2A3
0288:  BTFSS  47.7
0289:  GOTO   299
028A:  INCF   7A,F
028B:  BTFSS  03.2
028C:  GOTO   299
028D:  INCF   79,F
028E:  BTFSS  03.2
028F:  GOTO   299
0290:  INCF   78,F
0291:  BTFSS  03.2
0292:  GOTO   299
0293:  RRF    78,F
0294:  RRF    79,F
0295:  RRF    7A,F
0296:  INCF   77,F
0297:  BTFSC  03.2
0298:  GOTO   2A3
0299:  MOVF   3C,W
029A:  MOVWF  44
029B:  MOVF   40,W
029C:  XORWF  44,F
029D:  BTFSS  44.7
029E:  GOTO   2A1
029F:  BSF    78.7
02A0:  GOTO   2A7
02A1:  BCF    78.7
02A2:  GOTO   2A7
02A3:  CLRF   77
02A4:  CLRF   78
02A5:  CLRF   79
02A6:  CLRF   7A
02A7:  RETURN
02A8:  MOVF   2E,W
02A9:  BTFSC  03.2
02AA:  GOTO   36D
02AB:  MOVWF  3A
02AC:  MOVF   32,W
02AD:  BTFSC  03.2
02AE:  GOTO   36D
02AF:  SUBWF  3A,F
02B0:  BTFSS  03.0
02B1:  GOTO   2B7
02B2:  MOVLW  7F
02B3:  ADDWF  3A,F
02B4:  BTFSC  03.0
02B5:  GOTO   36D
02B6:  GOTO   2BD
02B7:  MOVLW  81
02B8:  SUBWF  3A,F
02B9:  BTFSS  03.0
02BA:  GOTO   36D
02BB:  BTFSC  03.2
02BC:  GOTO   36D
02BD:  MOVF   3A,W
02BE:  MOVWF  77
02BF:  CLRF   78
02C0:  CLRF   79
02C1:  CLRF   7A
02C2:  CLRF   39
02C3:  MOVF   2F,W
02C4:  MOVWF  38
02C5:  BSF    38.7
02C6:  MOVF   30,W
02C7:  MOVWF  37
02C8:  MOVF   31,W
02C9:  MOVWF  36
02CA:  MOVLW  19
02CB:  MOVWF  3A
02CC:  MOVF   35,W
02CD:  SUBWF  36,F
02CE:  BTFSC  03.0
02CF:  GOTO   2E0
02D0:  MOVLW  01
02D1:  SUBWF  37,F
02D2:  BTFSC  03.0
02D3:  GOTO   2E0
02D4:  SUBWF  38,F
02D5:  BTFSC  03.0
02D6:  GOTO   2E0
02D7:  SUBWF  39,F
02D8:  BTFSC  03.0
02D9:  GOTO   2E0
02DA:  INCF   39,F
02DB:  INCF   38,F
02DC:  INCF   37,F
02DD:  MOVF   35,W
02DE:  ADDWF  36,F
02DF:  GOTO   312
02E0:  MOVF   34,W
02E1:  SUBWF  37,F
02E2:  BTFSC  03.0
02E3:  GOTO   2FB
02E4:  MOVLW  01
02E5:  SUBWF  38,F
02E6:  BTFSC  03.0
02E7:  GOTO   2FB
02E8:  SUBWF  39,F
02E9:  BTFSC  03.0
02EA:  GOTO   2FB
02EB:  INCF   39,F
02EC:  INCF   38,F
02ED:  MOVF   34,W
02EE:  ADDWF  37,F
02EF:  MOVF   35,W
02F0:  ADDWF  36,F
02F1:  BTFSS  03.0
02F2:  GOTO   312
02F3:  INCF   37,F
02F4:  BTFSS  03.2
02F5:  GOTO   312
02F6:  INCF   38,F
02F7:  BTFSS  03.2
02F8:  GOTO   312
02F9:  INCF   39,F
02FA:  GOTO   312
02FB:  MOVF   33,W
02FC:  IORLW  80
02FD:  SUBWF  38,F
02FE:  BTFSC  03.0
02FF:  GOTO   311
0300:  MOVLW  01
0301:  SUBWF  39,F
0302:  BTFSC  03.0
0303:  GOTO   311
0304:  INCF   39,F
0305:  MOVF   33,W
0306:  IORLW  80
0307:  ADDWF  38,F
0308:  MOVF   34,W
0309:  ADDWF  37,F
030A:  BTFSS  03.0
030B:  GOTO   2EF
030C:  INCF   38,F
030D:  BTFSS  03.2
030E:  GOTO   2EF
030F:  INCF   39,F
0310:  GOTO   2EF
0311:  BSF    7A.0
0312:  DECFSZ 3A,F
0313:  GOTO   315
0314:  GOTO   320
0315:  BCF    03.0
0316:  RLF    36,F
0317:  RLF    37,F
0318:  RLF    38,F
0319:  RLF    39,F
031A:  BCF    03.0
031B:  RLF    7A,F
031C:  RLF    79,F
031D:  RLF    78,F
031E:  RLF    3B,F
031F:  GOTO   2CC
0320:  BTFSS  3B.0
0321:  GOTO   328
0322:  BCF    03.0
0323:  RRF    78,F
0324:  RRF    79,F
0325:  RRF    7A,F
0326:  RRF    3B,F
0327:  GOTO   32B
0328:  DECF   77,F
0329:  BTFSC  03.2
032A:  GOTO   36D
032B:  BTFSC  3B.7
032C:  GOTO   354
032D:  BCF    03.0
032E:  RLF    36,F
032F:  RLF    37,F
0330:  RLF    38,F
0331:  RLF    39,F
0332:  MOVF   35,W
0333:  SUBWF  36,F
0334:  BTFSC  03.0
0335:  GOTO   340
0336:  MOVLW  01
0337:  SUBWF  37,F
0338:  BTFSC  03.0
0339:  GOTO   340
033A:  SUBWF  38,F
033B:  BTFSC  03.0
033C:  GOTO   340
033D:  SUBWF  39,F
033E:  BTFSS  03.0
033F:  GOTO   363
0340:  MOVF   34,W
0341:  SUBWF  37,F
0342:  BTFSC  03.0
0343:  GOTO   34B
0344:  MOVLW  01
0345:  SUBWF  38,F
0346:  BTFSC  03.0
0347:  GOTO   34B
0348:  SUBWF  39,F
0349:  BTFSS  03.0
034A:  GOTO   363
034B:  MOVF   33,W
034C:  IORLW  80
034D:  SUBWF  38,F
034E:  BTFSC  03.0
034F:  GOTO   354
0350:  MOVLW  01
0351:  SUBWF  39,F
0352:  BTFSS  03.0
0353:  GOTO   363
0354:  INCF   7A,F
0355:  BTFSS  03.2
0356:  GOTO   363
0357:  INCF   79,F
0358:  BTFSS  03.2
0359:  GOTO   363
035A:  INCF   78,F
035B:  BTFSS  03.2
035C:  GOTO   363
035D:  INCF   77,F
035E:  BTFSC  03.2
035F:  GOTO   36D
0360:  RRF    78,F
0361:  RRF    79,F
0362:  RRF    7A,F
0363:  MOVF   2F,W
0364:  MOVWF  3A
0365:  MOVF   33,W
0366:  XORWF  3A,F
0367:  BTFSS  3A.7
0368:  GOTO   36B
0369:  BSF    78.7
036A:  GOTO   371
036B:  BCF    78.7
036C:  GOTO   371
036D:  CLRF   77
036E:  CLRF   78
036F:  CLRF   79
0370:  CLRF   7A
0371:  BCF    0A.3
0372:  BCF    0A.4
0373:  GOTO   6DE (RETURN)
0374:  MOVLW  80
0375:  BTFSC  03.1
0376:  XORWF  37,F
0377:  CLRF   3C
0378:  CLRF   3D
0379:  MOVF   33,W
037A:  MOVWF  3B
037B:  MOVF   37,W
037C:  XORWF  3B,F
037D:  MOVF   32,W
037E:  BTFSC  03.2
037F:  GOTO   464
0380:  MOVWF  3A
0381:  MOVWF  77
0382:  MOVF   36,W
0383:  BTFSC  03.2
0384:  GOTO   46D
0385:  SUBWF  3A,F
0386:  BTFSC  03.2
0387:  GOTO   409
0388:  BTFSS  03.0
0389:  GOTO   3C7
038A:  MOVF   37,W
038B:  MOVWF  40
038C:  BSF    40.7
038D:  MOVF   38,W
038E:  MOVWF  3F
038F:  MOVF   39,W
0390:  MOVWF  3E
0391:  CLRF   3D
0392:  BCF    03.0
0393:  RRF    40,F
0394:  RRF    3F,F
0395:  RRF    3E,F
0396:  RRF    3D,F
0397:  DECFSZ 3A,F
0398:  GOTO   391
0399:  BTFSS  3B.7
039A:  GOTO   39E
039B:  BSF    3C.0
039C:  GOTO   481
039D:  BCF    3C.0
039E:  BCF    3A.0
039F:  BSF    3C.4
03A0:  MOVLW  35
03A1:  MOVWF  04
03A2:  BCF    03.7
03A3:  GOTO   496
03A4:  BCF    3C.4
03A5:  BTFSC  3B.7
03A6:  GOTO   3B1
03A7:  BTFSS  3A.0
03A8:  GOTO   3BC
03A9:  RRF    40,F
03AA:  RRF    3F,F
03AB:  RRF    3E,F
03AC:  RRF    3D,F
03AD:  INCF   77,F
03AE:  BTFSC  03.2
03AF:  GOTO   47C
03B0:  GOTO   3BC
03B1:  BTFSC  40.7
03B2:  GOTO   3BF
03B3:  BCF    03.0
03B4:  RLF    3D,F
03B5:  RLF    3E,F
03B6:  RLF    3F,F
03B7:  RLF    40,F
03B8:  DECF   77,F
03B9:  BTFSC  03.2
03BA:  GOTO   47C
03BB:  GOTO   3B1
03BC:  BSF    3C.6
03BD:  GOTO   429
03BE:  BCF    3C.6
03BF:  MOVF   33,W
03C0:  MOVWF  3B
03C1:  BTFSS  3B.7
03C2:  GOTO   3C5
03C3:  BSF    40.7
03C4:  GOTO   475
03C5:  BCF    40.7
03C6:  GOTO   475
03C7:  MOVF   36,W
03C8:  MOVWF  3A
03C9:  MOVWF  77
03CA:  MOVF   32,W
03CB:  SUBWF  3A,F
03CC:  MOVF   33,W
03CD:  MOVWF  40
03CE:  BSF    40.7
03CF:  MOVF   34,W
03D0:  MOVWF  3F
03D1:  MOVF   35,W
03D2:  MOVWF  3E
03D3:  CLRF   3D
03D4:  BCF    03.0
03D5:  RRF    40,F
03D6:  RRF    3F,F
03D7:  RRF    3E,F
03D8:  RRF    3D,F
03D9:  DECFSZ 3A,F
03DA:  GOTO   3D3
03DB:  BTFSS  3B.7
03DC:  GOTO   3E0
03DD:  BSF    3C.1
03DE:  GOTO   481
03DF:  BCF    3C.1
03E0:  BCF    3A.0
03E1:  BSF    3C.5
03E2:  MOVLW  39
03E3:  MOVWF  04
03E4:  BCF    03.7
03E5:  GOTO   496
03E6:  BCF    3C.5
03E7:  BTFSC  3B.7
03E8:  GOTO   3F3
03E9:  BTFSS  3A.0
03EA:  GOTO   3FE
03EB:  RRF    40,F
03EC:  RRF    3F,F
03ED:  RRF    3E,F
03EE:  RRF    3D,F
03EF:  INCF   77,F
03F0:  BTFSC  03.2
03F1:  GOTO   47C
03F2:  GOTO   3FE
03F3:  BTFSC  40.7
03F4:  GOTO   401
03F5:  BCF    03.0
03F6:  RLF    3D,F
03F7:  RLF    3E,F
03F8:  RLF    3F,F
03F9:  RLF    40,F
03FA:  DECF   77,F
03FB:  BTFSC  03.2
03FC:  GOTO   47C
03FD:  GOTO   3F3
03FE:  BSF    3C.7
03FF:  GOTO   429
0400:  BCF    3C.7
0401:  MOVF   37,W
0402:  MOVWF  3B
0403:  BTFSS  3B.7
0404:  GOTO   407
0405:  BSF    40.7
0406:  GOTO   475
0407:  BCF    40.7
0408:  GOTO   475
0409:  MOVF   37,W
040A:  MOVWF  40
040B:  BSF    40.7
040C:  MOVF   38,W
040D:  MOVWF  3F
040E:  MOVF   39,W
040F:  MOVWF  3E
0410:  BTFSS  3B.7
0411:  GOTO   416
0412:  BCF    40.7
0413:  BSF    3C.2
0414:  GOTO   481
0415:  BCF    3C.2
0416:  CLRF   3D
0417:  BCF    3A.0
0418:  MOVLW  35
0419:  MOVWF  04
041A:  BCF    03.7
041B:  GOTO   496
041C:  BTFSC  3B.7
041D:  GOTO   43F
041E:  MOVF   33,W
041F:  MOVWF  3B
0420:  BTFSS  3A.0
0421:  GOTO   429
0422:  RRF    40,F
0423:  RRF    3F,F
0424:  RRF    3E,F
0425:  RRF    3D,F
0426:  INCF   77,F
0427:  BTFSC  03.2
0428:  GOTO   47C
0429:  BTFSS  3D.7
042A:  GOTO   43A
042B:  INCF   3E,F
042C:  BTFSS  03.2
042D:  GOTO   43A
042E:  INCF   3F,F
042F:  BTFSS  03.2
0430:  GOTO   43A
0431:  INCF   40,F
0432:  BTFSS  03.2
0433:  GOTO   43A
0434:  RRF    40,F
0435:  RRF    3F,F
0436:  RRF    3E,F
0437:  INCF   77,F
0438:  BTFSC  03.2
0439:  GOTO   47C
043A:  BTFSC  3C.6
043B:  GOTO   3BE
043C:  BTFSC  3C.7
043D:  GOTO   400
043E:  GOTO   45E
043F:  MOVLW  80
0440:  XORWF  40,F
0441:  BTFSS  40.7
0442:  GOTO   447
0443:  GOTO   481
0444:  MOVF   37,W
0445:  MOVWF  3B
0446:  GOTO   454
0447:  MOVF   33,W
0448:  MOVWF  3B
0449:  MOVF   40,F
044A:  BTFSS  03.2
044B:  GOTO   454
044C:  MOVF   3F,F
044D:  BTFSS  03.2
044E:  GOTO   454
044F:  MOVF   3E,F
0450:  BTFSS  03.2
0451:  GOTO   454
0452:  CLRF   77
0453:  GOTO   475
0454:  BTFSC  40.7
0455:  GOTO   45E
0456:  BCF    03.0
0457:  RLF    3D,F
0458:  RLF    3E,F
0459:  RLF    3F,F
045A:  RLF    40,F
045B:  DECFSZ 77,F
045C:  GOTO   454
045D:  GOTO   47C
045E:  BTFSS  3B.7
045F:  GOTO   462
0460:  BSF    40.7
0461:  GOTO   475
0462:  BCF    40.7
0463:  GOTO   475
0464:  MOVF   36,W
0465:  MOVWF  77
0466:  MOVF   37,W
0467:  MOVWF  40
0468:  MOVF   38,W
0469:  MOVWF  3F
046A:  MOVF   39,W
046B:  MOVWF  3E
046C:  GOTO   475
046D:  MOVF   32,W
046E:  MOVWF  77
046F:  MOVF   33,W
0470:  MOVWF  40
0471:  MOVF   34,W
0472:  MOVWF  3F
0473:  MOVF   35,W
0474:  MOVWF  3E
0475:  MOVF   40,W
0476:  MOVWF  78
0477:  MOVF   3F,W
0478:  MOVWF  79
0479:  MOVF   3E,W
047A:  MOVWF  7A
047B:  GOTO   4B4
047C:  CLRF   77
047D:  CLRF   78
047E:  CLRF   79
047F:  CLRF   7A
0480:  GOTO   4B4
0481:  CLRF   3D
0482:  COMF   3E,F
0483:  COMF   3F,F
0484:  COMF   40,F
0485:  COMF   3D,F
0486:  INCF   3D,F
0487:  BTFSS  03.2
0488:  GOTO   48F
0489:  INCF   3E,F
048A:  BTFSS  03.2
048B:  GOTO   48F
048C:  INCF   3F,F
048D:  BTFSC  03.2
048E:  INCF   40,F
048F:  BTFSC  3C.0
0490:  GOTO   39D
0491:  BTFSC  3C.1
0492:  GOTO   3DF
0493:  BTFSC  3C.2
0494:  GOTO   415
0495:  GOTO   444
0496:  MOVF   00,W
0497:  ADDWF  3E,F
0498:  BTFSS  03.0
0499:  GOTO   4A0
049A:  INCF   3F,F
049B:  BTFSS  03.2
049C:  GOTO   4A0
049D:  INCF   40,F
049E:  BTFSC  03.2
049F:  BSF    3A.0
04A0:  DECF   04,F
04A1:  MOVF   00,W
04A2:  ADDWF  3F,F
04A3:  BTFSS  03.0
04A4:  GOTO   4A8
04A5:  INCF   40,F
04A6:  BTFSC  03.2
04A7:  BSF    3A.0
04A8:  DECF   04,F
04A9:  MOVF   00,W
04AA:  BTFSS  00.7
04AB:  XORLW  80
04AC:  ADDWF  40,F
04AD:  BTFSC  03.0
04AE:  BSF    3A.0
04AF:  BTFSC  3C.4
04B0:  GOTO   3A4
04B1:  BTFSC  3C.5
04B2:  GOTO   3E6
04B3:  GOTO   41C
04B4:  BCF    0A.3
04B5:  BCF    0A.4
04B6:  GOTO   6F5 (RETURN)
04B7:  MOVLW  8E
04B8:  MOVWF  77
04B9:  MOVF   2E,W
04BA:  SUBWF  77,F
04BB:  MOVF   2F,W
04BC:  MOVWF  79
04BD:  MOVF   30,W
04BE:  MOVWF  78
04BF:  BSF    79.7
04C0:  MOVF   77,F
04C1:  BTFSC  03.2
04C2:  GOTO   4CE
04C3:  BCF    03.0
04C4:  MOVF   79,F
04C5:  BTFSS  03.2
04C6:  GOTO   4CA
04C7:  MOVF   78,F
04C8:  BTFSC  03.2
04C9:  GOTO   4CE
04CA:  RRF    79,F
04CB:  RRF    78,F
04CC:  DECFSZ 77,F
04CD:  GOTO   4C3
04CE:  BTFSS  2F.7
04CF:  GOTO   4D5
04D0:  COMF   78,F
04D1:  COMF   79,F
04D2:  INCF   78,F
04D3:  BTFSC  03.2
04D4:  INCF   79,F
04D5:  BCF    0A.3
04D6:  BCF    0A.4
04D7:  GOTO   706 (RETURN)
04D8:  BTFSC  03.1
04D9:  GOTO   4DD
04DA:  MOVLW  43
04DB:  MOVWF  04
04DC:  BCF    03.7
04DD:  CLRF   77
04DE:  CLRF   78
04DF:  CLRF   79
04E0:  CLRF   7A
04E1:  CLRF   43
04E2:  CLRF   44
04E3:  CLRF   45
04E4:  CLRF   46
04E5:  MOVF   42,W
04E6:  IORWF  41,W
04E7:  IORWF  40,W
04E8:  IORWF  3F,W
04E9:  BTFSC  03.2
04EA:  GOTO   51B
04EB:  MOVLW  20
04EC:  MOVWF  47
04ED:  BCF    03.0
04EE:  RLF    3B,F
04EF:  RLF    3C,F
04F0:  RLF    3D,F
04F1:  RLF    3E,F
04F2:  RLF    43,F
04F3:  RLF    44,F
04F4:  RLF    45,F
04F5:  RLF    46,F
04F6:  MOVF   42,W
04F7:  SUBWF  46,W
04F8:  BTFSS  03.2
04F9:  GOTO   504
04FA:  MOVF   41,W
04FB:  SUBWF  45,W
04FC:  BTFSS  03.2
04FD:  GOTO   504
04FE:  MOVF   40,W
04FF:  SUBWF  44,W
0500:  BTFSS  03.2
0501:  GOTO   504
0502:  MOVF   3F,W
0503:  SUBWF  43,W
0504:  BTFSS  03.0
0505:  GOTO   515
0506:  MOVF   3F,W
0507:  SUBWF  43,F
0508:  MOVF   40,W
0509:  BTFSS  03.0
050A:  INCFSZ 40,W
050B:  SUBWF  44,F
050C:  MOVF   41,W
050D:  BTFSS  03.0
050E:  INCFSZ 41,W
050F:  SUBWF  45,F
0510:  MOVF   42,W
0511:  BTFSS  03.0
0512:  INCFSZ 42,W
0513:  SUBWF  46,F
0514:  BSF    03.0
0515:  RLF    77,F
0516:  RLF    78,F
0517:  RLF    79,F
0518:  RLF    7A,F
0519:  DECFSZ 47,F
051A:  GOTO   4ED
051B:  MOVF   43,W
051C:  MOVWF  00
051D:  INCF   04,F
051E:  MOVF   44,W
051F:  MOVWF  00
0520:  INCF   04,F
0521:  MOVF   45,W
0522:  MOVWF  00
0523:  INCF   04,F
0524:  MOVF   46,W
0525:  MOVWF  00
0526:  RETURN
0527:  MOVF   04,W
0528:  MOVWF  33
0529:  MOVF   32,W
052A:  MOVWF  35
052B:  BTFSC  03.2
052C:  GOTO   546
052D:  MOVF   31,W
052E:  MOVWF  3E
052F:  MOVF   30,W
0530:  MOVWF  3D
0531:  MOVF   2F,W
0532:  MOVWF  3C
0533:  MOVF   2E,W
0534:  MOVWF  3B
0535:  CLRF   42
0536:  CLRF   41
0537:  MOVLW  20
0538:  MOVWF  40
0539:  MOVLW  82
053A:  MOVWF  3F
053B:  CALL   233
053C:  MOVF   7A,W
053D:  MOVWF  31
053E:  MOVF   79,W
053F:  MOVWF  30
0540:  MOVF   78,W
0541:  MOVWF  2F
0542:  MOVF   77,W
0543:  MOVWF  2E
0544:  DECFSZ 35,F
0545:  GOTO   52D
0546:  MOVF   31,W
0547:  MOVWF  3E
0548:  MOVF   30,W
0549:  MOVWF  3D
054A:  MOVF   2F,W
054B:  MOVWF  3C
054C:  MOVF   2E,W
054D:  MOVWF  3B
054E:  MOVF   3B,W
054F:  SUBLW  B6
0550:  MOVWF  3B
0551:  CLRF   7A
0552:  MOVF   3C,W
0553:  MOVWF  3F
0554:  BSF    3C.7
0555:  BCF    03.0
0556:  RRF    3C,F
0557:  RRF    3D,F
0558:  RRF    3E,F
0559:  RRF    7A,F
055A:  RRF    79,F
055B:  RRF    78,F
055C:  RRF    77,F
055D:  DECFSZ 3B,F
055E:  GOTO   555
055F:  BTFSS  3F.7
0560:  GOTO   56C
0561:  COMF   77,F
0562:  COMF   78,F
0563:  COMF   79,F
0564:  COMF   7A,F
0565:  INCF   77,F
0566:  BTFSC  03.2
0567:  INCF   78,F
0568:  BTFSC  03.2
0569:  INCF   79,F
056A:  BTFSC  03.2
056B:  INCF   7A,F
056C:  MOVF   7A,W
056D:  MOVWF  31
056E:  MOVF   79,W
056F:  MOVWF  30
0570:  MOVF   78,W
0571:  MOVWF  2F
0572:  MOVF   77,W
0573:  MOVWF  2E
0574:  BTFSS  31.7
0575:  GOTO   583
0576:  DECF   33,F
0577:  BSF    33.5
0578:  COMF   2E,F
0579:  COMF   2F,F
057A:  COMF   30,F
057B:  COMF   31,F
057C:  INCF   2E,F
057D:  BTFSC  03.2
057E:  INCF   2F,F
057F:  BTFSC  03.2
0580:  INCF   30,F
0581:  BTFSC  03.2
0582:  INCF   31,F
0583:  MOVLW  3B
0584:  MOVWF  3A
0585:  MOVLW  9A
0586:  MOVWF  39
0587:  MOVLW  CA
0588:  MOVWF  38
0589:  CLRF   37
058A:  MOVLW  0A
058B:  MOVWF  35
058C:  MOVF   32,W
058D:  BTFSC  03.2
058E:  INCF   33,F
058F:  BSF    03.1
0590:  MOVLW  2E
0591:  MOVWF  04
0592:  BCF    03.7
0593:  MOVF   31,W
0594:  MOVWF  3E
0595:  MOVF   30,W
0596:  MOVWF  3D
0597:  MOVF   2F,W
0598:  MOVWF  3C
0599:  MOVF   2E,W
059A:  MOVWF  3B
059B:  MOVF   3A,W
059C:  MOVWF  42
059D:  MOVF   39,W
059E:  MOVWF  41
059F:  MOVF   38,W
05A0:  MOVWF  40
05A1:  MOVF   37,W
05A2:  MOVWF  3F
05A3:  CALL   4D8
05A4:  MOVF   78,W
05A5:  MOVF   77,F
05A6:  BTFSS  03.2
05A7:  GOTO   5BB
05A8:  INCF   32,W
05A9:  SUBWF  35,W
05AA:  BTFSC  03.2
05AB:  GOTO   5BB
05AC:  MOVF   33,W
05AD:  BTFSC  03.2
05AE:  GOTO   5BD
05AF:  ANDLW  0F
05B0:  SUBWF  35,W
05B1:  BTFSC  03.2
05B2:  GOTO   5B5
05B3:  BTFSC  03.0
05B4:  GOTO   5ED
05B5:  BTFSC  33.7
05B6:  GOTO   5ED
05B7:  BTFSC  33.6
05B8:  GOTO   5BD
05B9:  MOVLW  20
05BA:  GOTO   5E9
05BB:  MOVLW  20
05BC:  ANDWF  33,F
05BD:  BTFSS  33.5
05BE:  GOTO   5CB
05BF:  BCF    33.5
05C0:  MOVF   32,W
05C1:  BTFSS  03.2
05C2:  DECF   33,F
05C3:  MOVF   77,W
05C4:  MOVWF  33
05C5:  MOVLW  2D
05C6:  MOVWF  3B
05C7:  CALL   0CD
05C8:  MOVF   33,W
05C9:  MOVWF  77
05CA:  CLRF   33
05CB:  MOVF   32,W
05CC:  SUBWF  35,W
05CD:  BTFSS  03.2
05CE:  GOTO   5D9
05CF:  MOVF   77,W
05D0:  MOVWF  33
05D1:  MOVLW  2E
05D2:  MOVWF  3B
05D3:  CALL   0CD
05D4:  MOVF   33,W
05D5:  MOVWF  77
05D6:  MOVLW  20
05D7:  ANDWF  33,F
05D8:  MOVLW  00
05D9:  MOVLW  30
05DA:  BTFSS  33.5
05DB:  GOTO   5E9
05DC:  BCF    33.5
05DD:  MOVF   32,W
05DE:  BTFSS  03.2
05DF:  DECF   33,F
05E0:  MOVF   77,W
05E1:  MOVWF  33
05E2:  MOVLW  2D
05E3:  MOVWF  3B
05E4:  CALL   0CD
05E5:  MOVF   33,W
05E6:  MOVWF  77
05E7:  CLRF   33
05E8:  MOVLW  30
05E9:  ADDWF  77,F
05EA:  MOVF   77,W
05EB:  MOVWF  3B
05EC:  CALL   0CD
05ED:  BCF    03.1
05EE:  MOVF   3A,W
05EF:  MOVWF  3E
05F0:  MOVF   39,W
05F1:  MOVWF  3D
05F2:  MOVF   38,W
05F3:  MOVWF  3C
05F4:  MOVF   37,W
05F5:  MOVWF  3B
05F6:  CLRF   42
05F7:  CLRF   41
05F8:  CLRF   40
05F9:  MOVLW  0A
05FA:  MOVWF  3F
05FB:  CALL   4D8
05FC:  MOVF   7A,W
05FD:  MOVWF  3A
05FE:  MOVF   79,W
05FF:  MOVWF  39
0600:  MOVF   78,W
0601:  MOVWF  38
0602:  MOVF   77,W
0603:  MOVWF  37
0604:  DECFSZ 35,F
0605:  GOTO   58F
0606:  BCF    0A.3
0607:  BCF    0A.4
0608:  GOTO   721 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 // 0 ile 1023 
.................... #use delay(clock=4000000) 
*
0016:  MOVLW  3C
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   02A
001C:  MOVLW  01
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  4A
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  GOTO   028
0028:  DECFSZ 00,F
0029:  GOTO   01C
002A:  RETURN
.................... #fuses XT, NOWDT, NOPUT, NOLVP, NOCPD, NOPROTECT, NODEBUG, NOBROWNOUT, NOWRT 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... #define yukari pin_d0 
.................... #define asagi  pin_d1 
.................... #define use_portb_lcd TRUE 
.................... #define led pin_c0 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0043:  MOVLW  0F
0044:  BSF    03.5
0045:  ANDWF  06,W
0046:  IORLW  F0
0047:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0048:  BCF    03.5
0049:  BSF    06.2
....................    delay_cycles(1); 
004A:  NOP
....................    lcd_output_enable(1); 
004B:  BSF    06.0
....................    delay_cycles(1); 
004C:  NOP
....................    high = lcd_read_nibble(); 
004D:  CALL   037
004E:  MOVF   78,W
004F:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
0050:  BCF    06.0
....................    delay_cycles(1); 
0051:  NOP
....................    lcd_output_enable(1); 
0052:  BSF    06.0
....................    delay_us(1); 
0053:  NOP
....................    low = lcd_read_nibble(); 
0054:  CALL   037
0055:  MOVF   78,W
0056:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
0057:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0058:  MOVLW  0F
0059:  BSF    03.5
005A:  ANDWF  06,W
005B:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005C:  BCF    03.5
005D:  SWAPF  43,W
005E:  MOVWF  77
005F:  MOVLW  F0
0060:  ANDWF  77,F
0061:  MOVF   77,W
0062:  IORWF  42,W
0063:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0037:  MOVF   06,W
0038:  MOVWF  77
0039:  SWAPF  06,W
003A:  ANDLW  0F
003B:  MOVWF  78
....................   #endif 
003C:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002B:  SWAPF  43,W
002C:  ANDLW  F0
002D:  MOVWF  77
002E:  MOVLW  0F
002F:  ANDWF  06,W
0030:  IORWF  77,W
0031:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0032:  NOP
....................    lcd_output_enable(1); 
0033:  BSF    06.0
....................    delay_us(2); 
0034:  GOTO   035
....................    lcd_output_enable(0); 
0035:  BCF    06.0
0036:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003D:  BSF    03.5
003E:  BCF    06.0
....................    lcd_rs_tris(); 
003F:  BCF    06.1
....................    lcd_rw_tris(); 
0040:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0041:  BCF    03.5
0042:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0064:  MOVF   78,W
0065:  MOVWF  42
0066:  BTFSC  42.7
0067:  GOTO   043
....................    lcd_output_rs(address); 
0068:  BTFSS  40.0
0069:  BCF    06.1
006A:  BTFSC  40.0
006B:  BSF    06.1
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_rw(0); 
006D:  BCF    06.2
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_enable(0); 
006F:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0070:  SWAPF  41,W
0071:  MOVWF  42
0072:  MOVLW  0F
0073:  ANDWF  42,F
0074:  MOVF   42,W
0075:  MOVWF  43
0076:  CALL   02B
....................    lcd_send_nibble(n & 0xf); 
0077:  MOVF   41,W
0078:  ANDLW  0F
0079:  MOVWF  42
007A:  MOVWF  43
007B:  CALL   02B
007C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007D:  MOVLW  28
007E:  MOVWF  2F
007F:  MOVLW  0C
0080:  MOVWF  30
0081:  MOVLW  01
0082:  MOVWF  31
0083:  MOVLW  06
0084:  MOVWF  32
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0085:  BCF    06.0
....................    lcd_output_rs(0); 
0086:  BCF    06.1
....................    lcd_output_rw(0); 
0087:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0088:  MOVLW  0F
0089:  BSF    03.5
008A:  ANDWF  06,W
008B:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
008C:  BCF    06.0
....................    lcd_rs_tris(); 
008D:  BCF    06.1
....................    lcd_rw_tris(); 
008E:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
008F:  MOVLW  0F
0090:  BCF    03.5
0091:  MOVWF  3C
0092:  CALL   016
....................    for(i=1;i<=3;++i) 
0093:  MOVLW  01
0094:  MOVWF  2E
0095:  MOVF   2E,W
0096:  SUBLW  03
0097:  BTFSS  03.0
0098:  GOTO   0A1
....................    { 
....................        lcd_send_nibble(3); 
0099:  MOVLW  03
009A:  MOVWF  43
009B:  CALL   02B
....................        delay_ms(5); 
009C:  MOVLW  05
009D:  MOVWF  3C
009E:  CALL   016
009F:  INCF   2E,F
00A0:  GOTO   095
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A1:  MOVLW  02
00A2:  MOVWF  43
00A3:  CALL   02B
....................    delay_ms(5); 
00A4:  MOVLW  05
00A5:  MOVWF  3C
00A6:  CALL   016
....................    for(i=0;i<=3;++i) 
00A7:  CLRF   2E
00A8:  MOVF   2E,W
00A9:  SUBLW  03
00AA:  BTFSS  03.0
00AB:  GOTO   0B8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AC:  MOVLW  2F
00AD:  ADDWF  2E,W
00AE:  MOVWF  04
00AF:  BCF    03.7
00B0:  MOVF   00,W
00B1:  MOVWF  33
00B2:  CLRF   40
00B3:  MOVF   33,W
00B4:  MOVWF  41
00B5:  CALL   03D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B6:  INCF   2E,F
00B7:  GOTO   0A8
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   62B (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00BB:  DECFSZ 3D,W
00BC:  GOTO   0BE
00BD:  GOTO   0C1
....................       address=LCD_LINE_TWO; 
00BE:  MOVLW  40
00BF:  MOVWF  3E
00C0:  GOTO   0C2
....................    else 
....................       address=0; 
00C1:  CLRF   3E
....................       
....................    address+=x-1; 
00C2:  MOVLW  01
00C3:  SUBWF  3C,W
00C4:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address); 
00C5:  MOVF   3E,W
00C6:  IORLW  80
00C7:  MOVWF  3F
00C8:  CLRF   40
00C9:  MOVF   3F,W
00CA:  MOVWF  41
00CB:  CALL   03D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CC:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00CD:  MOVF   3B,W
00CE:  XORLW  07
00CF:  BTFSC  03.2
00D0:  GOTO   0DB
00D1:  XORLW  0B
00D2:  BTFSC  03.2
00D3:  GOTO   0E0
00D4:  XORLW  06
00D5:  BTFSC  03.2
00D6:  GOTO   0E8
00D7:  XORLW  02
00D8:  BTFSC  03.2
00D9:  GOTO   0EE
00DA:  GOTO   0F3
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00DB:  MOVLW  01
00DC:  MOVWF  3C
00DD:  MOVWF  3D
00DE:  CALL   0BB
00DF:  GOTO   0F8
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E0:  CLRF   40
00E1:  MOVLW  01
00E2:  MOVWF  41
00E3:  CALL   03D
....................                      delay_ms(2); 
00E4:  MOVLW  02
00E5:  MOVWF  3C
00E6:  CALL   016
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E7:  GOTO   0F8
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E8:  MOVLW  01
00E9:  MOVWF  3C
00EA:  MOVLW  02
00EB:  MOVWF  3D
00EC:  CALL   0BB
00ED:  GOTO   0F8
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00EE:  CLRF   40
00EF:  MOVLW  10
00F0:  MOVWF  41
00F1:  CALL   03D
00F2:  GOTO   0F8
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F3:  MOVLW  01
00F4:  MOVWF  40
00F5:  MOVF   3B,W
00F6:  MOVWF  41
00F7:  CALL   03D
....................      #endif 
....................    } 
00F8:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned long int deger;  
.................... float gerilim, sicaklik; 
.................... signed int8 ayar=0; 
.................... int1 ayar_yukari=1; 
.................... int1 eski_yukari=1; 
.................... int1 ayar_asagi=1; 
.................... int1 eski_asagi=1; 
....................  
....................  
.................... void main() 
*
0609:  MOVF   03,W
060A:  ANDLW  1F
060B:  MOVWF  03
060C:  CLRF   2A
060D:  BSF    2B.0
060E:  BSF    2B.1
060F:  BSF    2B.2
0610:  BSF    2B.3
0611:  MOVLW  FF
0612:  MOVWF  2C
0613:  BSF    03.5
0614:  BSF    1F.0
0615:  BSF    1F.1
0616:  BSF    1F.2
0617:  BCF    1F.3
0618:  BCF    03.7
.................... { 
....................     setup_psp(PSP_DISABLED); 
0619:  BCF    09.4
....................     setup_timer_1(T1_DISABLED); 
061A:  BCF    03.5
061B:  CLRF   10
....................     setup_CCP1(CCP_OFF); 
061C:  MOVLW  F0
061D:  ANDWF  17,F
....................     setup_CCP2(CCP_OFF); 
061E:  ANDWF  1D,F
....................  
....................     set_tris_a(0x20); // Port A konfigürasyonu 
061F:  MOVLW  20
0620:  BSF    03.5
0621:  MOVWF  05
....................     set_tris_b(0x00); // Port B konfigürasyonu 
0622:  MOVLW  00
0623:  MOVWF  06
....................     set_tris_d(0xFF); // Port D konfigürasyonu 
0624:  MOVLW  FF
0625:  MOVWF  08
....................     set_tris_c(0x00); // Port C konfigürasyonu 
0626:  MOVLW  00
0627:  MOVWF  07
0628:  BCF    03.5
0629:  MOVWF  2C
....................  
....................     lcd_init(); 
062A:  GOTO   07D
....................     setup_adc(adc_clock_div_32);  
062B:  BCF    1F.6
062C:  BSF    1F.7
062D:  BSF    03.5
062E:  BSF    1F.7
062F:  BCF    03.5
0630:  BSF    1F.0
....................     setup_adc_ports(ALL_ANALOG); // AN4 için ADC ayarlarý 
0631:  BSF    03.5
0632:  BCF    1F.0
0633:  BCF    1F.1
0634:  BCF    1F.2
0635:  BCF    1F.3
....................  
....................     set_adc_channel(4);  
0636:  MOVLW  20
0637:  MOVWF  78
0638:  BCF    03.5
0639:  MOVF   1F,W
063A:  ANDLW  C7
063B:  IORWF  78,W
063C:  MOVWF  1F
....................     delay_us(20); 
063D:  MOVLW  06
063E:  MOVWF  77
063F:  DECFSZ 77,F
0640:  GOTO   63F
0641:  NOP
....................  
....................     printf(lcd_putc,"\fSicaklik="); 
0642:  MOVLW  04
0643:  BSF    03.6
0644:  MOVWF  0D
0645:  MOVLW  00
0646:  MOVWF  0F
0647:  BCF    03.6
0648:  GOTO   0F9
....................      
....................  
....................     while(true) 
....................     { 
....................      
....................         ayar_yukari = input(pin_d0); 
0649:  BCF    2B.0
064A:  BTFSC  08.0
064B:  BSF    2B.0
....................         if(ayar_yukari != eski_yukari) 
064C:  CLRF   77
064D:  BTFSC  2B.1
064E:  BSF    77.0
064F:  MOVF   2B,W
0650:  XORWF  77,W
0651:  ANDLW  01
0652:  BTFSC  03.2
0653:  GOTO   677
....................         { 
....................             eski_yukari = ayar_yukari; 
0654:  BCF    2B.1
0655:  BTFSC  2B.0
0656:  BSF    2B.1
....................             if(ayar_yukari == 0) 
0657:  BTFSC  2B.0
0658:  GOTO   677
....................             { 
....................                 ayar++; 
0659:  INCF   2A,F
....................                 lcd_gotoxy(8,2); 
065A:  MOVLW  08
065B:  MOVWF  3C
065C:  MOVLW  02
065D:  MOVWF  3D
065E:  CALL   0BB
....................                 printf(lcd_putc,"AYAR=%d C ",ayar); 
065F:  MOVLW  0A
0660:  BSF    03.6
0661:  MOVWF  0D
0662:  MOVLW  00
0663:  MOVWF  0F
0664:  BCF    03.0
0665:  MOVLW  05
0666:  BCF    03.6
0667:  MOVWF  2E
0668:  CALL   151
0669:  MOVF   2A,W
066A:  MOVWF  2E
066B:  MOVLW  18
066C:  MOVWF  2F
066D:  CALL   1BD
066E:  MOVLW  20
066F:  MOVWF  3B
0670:  CALL   0CD
0671:  MOVLW  43
0672:  MOVWF  3B
0673:  CALL   0CD
0674:  MOVLW  20
0675:  MOVWF  3B
0676:  CALL   0CD
....................                
....................         } 
....................         } 
....................  
....................         ayar_asagi = input(pin_d1); 
0677:  BCF    2B.2
0678:  BTFSC  08.1
0679:  BSF    2B.2
....................         if(ayar_asagi != eski_asagi) 
067A:  CLRF   77
067B:  BTFSC  2B.3
067C:  BSF    77.2
067D:  MOVF   2B,W
067E:  XORWF  77,W
067F:  ANDLW  04
0680:  BTFSC  03.2
0681:  GOTO   6A8
....................         { 
....................             eski_asagi = ayar_asagi; 
0682:  BCF    2B.3
0683:  BTFSC  2B.2
0684:  BSF    2B.3
....................             if(ayar_asagi == 0) 
0685:  BTFSC  2B.2
0686:  GOTO   6A8
....................             {  
....................                 ayar--; 
0687:  DECF   2A,F
....................                 if(ayar<0) 
0688:  BTFSS  2A.7
0689:  GOTO   68B
....................                 {ayar=0;} 
068A:  CLRF   2A
....................                 lcd_gotoxy(8,2); 
068B:  MOVLW  08
068C:  MOVWF  3C
068D:  MOVLW  02
068E:  MOVWF  3D
068F:  CALL   0BB
....................                 printf(lcd_putc,"AYAR=%d C ",ayar); 
0690:  MOVLW  10
0691:  BSF    03.6
0692:  MOVWF  0D
0693:  MOVLW  00
0694:  MOVWF  0F
0695:  BCF    03.0
0696:  MOVLW  05
0697:  BCF    03.6
0698:  MOVWF  2E
0699:  CALL   151
069A:  MOVF   2A,W
069B:  MOVWF  2E
069C:  MOVLW  18
069D:  MOVWF  2F
069E:  CALL   1BD
069F:  MOVLW  20
06A0:  MOVWF  3B
06A1:  CALL   0CD
06A2:  MOVLW  43
06A3:  MOVWF  3B
06A4:  CALL   0CD
06A5:  MOVLW  20
06A6:  MOVWF  3B
06A7:  CALL   0CD
....................                
....................         } 
....................         } 
....................          
....................         
....................                  
....................         deger = read_adc(); 
06A8:  BSF    1F.2
06A9:  BTFSC  1F.2
06AA:  GOTO   6A9
06AB:  BSF    03.5
06AC:  MOVF   1E,W
06AD:  BCF    03.5
06AE:  MOVWF  20
06AF:  MOVF   1E,W
06B0:  MOVWF  21
....................         gerilim = deger * 4.88760; 
06B1:  MOVF   21,W
06B2:  MOVWF  2F
06B3:  MOVF   20,W
06B4:  MOVWF  2E
06B5:  GOTO   214
06B6:  MOVF   7A,W
06B7:  MOVWF  3E
06B8:  MOVF   79,W
06B9:  MOVWF  3D
06BA:  MOVF   78,W
06BB:  MOVWF  3C
06BC:  MOVF   77,W
06BD:  MOVWF  3B
06BE:  MOVLW  38
06BF:  MOVWF  42
06C0:  MOVLW  67
06C1:  MOVWF  41
06C2:  MOVLW  1C
06C3:  MOVWF  40
06C4:  MOVLW  81
06C5:  MOVWF  3F
06C6:  CALL   233
06C7:  MOVF   7A,W
06C8:  MOVWF  25
06C9:  MOVF   79,W
06CA:  MOVWF  24
06CB:  MOVF   78,W
06CC:  MOVWF  23
06CD:  MOVF   77,W
06CE:  MOVWF  22
....................         sicaklik = (gerilim / 10)-2; 
06CF:  MOVF   25,W
06D0:  MOVWF  31
06D1:  MOVF   24,W
06D2:  MOVWF  30
06D3:  MOVF   23,W
06D4:  MOVWF  2F
06D5:  MOVF   22,W
06D6:  MOVWF  2E
06D7:  CLRF   35
06D8:  CLRF   34
06D9:  MOVLW  20
06DA:  MOVWF  33
06DB:  MOVLW  82
06DC:  MOVWF  32
06DD:  GOTO   2A8
06DE:  MOVF   7A,W
06DF:  MOVWF  31
06E0:  MOVF   79,W
06E1:  MOVWF  30
06E2:  MOVF   78,W
06E3:  MOVWF  2F
06E4:  MOVF   77,W
06E5:  MOVWF  2E
06E6:  BSF    03.1
06E7:  MOVF   7A,W
06E8:  MOVWF  35
06E9:  MOVF   79,W
06EA:  MOVWF  34
06EB:  MOVF   78,W
06EC:  MOVWF  33
06ED:  MOVF   77,W
06EE:  MOVWF  32
06EF:  CLRF   39
06F0:  CLRF   38
06F1:  CLRF   37
06F2:  MOVLW  80
06F3:  MOVWF  36
06F4:  GOTO   374
06F5:  MOVF   7A,W
06F6:  MOVWF  29
06F7:  MOVF   79,W
06F8:  MOVWF  28
06F9:  MOVF   78,W
06FA:  MOVWF  27
06FB:  MOVF   77,W
06FC:  MOVWF  26
....................         int sicaklik_int = (int)sicaklik; 
06FD:  MOVF   29,W
06FE:  MOVWF  31
06FF:  MOVF   28,W
0700:  MOVWF  30
0701:  MOVF   27,W
0702:  MOVWF  2F
0703:  MOVF   26,W
0704:  MOVWF  2E
0705:  GOTO   4B7
0706:  MOVF   78,W
0707:  MOVWF  2D
....................         delay_ms(1000); 
0708:  MOVLW  04
0709:  MOVWF  2E
070A:  MOVLW  FA
070B:  MOVWF  3C
070C:  CALL   016
070D:  DECFSZ 2E,F
070E:  GOTO   70A
....................  
....................         lcd_gotoxy(10,1); 
070F:  MOVLW  0A
0710:  MOVWF  3C
0711:  MOVLW  01
0712:  MOVWF  3D
0713:  CALL   0BB
....................         printf(lcd_putc,"%f C",sicaklik); 
0714:  MOVLW  89
0715:  MOVWF  04
0716:  MOVF   29,W
0717:  MOVWF  31
0718:  MOVF   28,W
0719:  MOVWF  30
071A:  MOVF   27,W
071B:  MOVWF  2F
071C:  MOVF   26,W
071D:  MOVWF  2E
071E:  MOVLW  02
071F:  MOVWF  32
0720:  GOTO   527
0721:  MOVLW  20
0722:  MOVWF  3B
0723:  CALL   0CD
0724:  MOVLW  43
0725:  MOVWF  3B
0726:  CALL   0CD
....................  
....................         if (sicaklik_int <= ayar)  
0727:  BTFSC  2A.7
0728:  GOTO   734
0729:  MOVF   2D,W
072A:  SUBWF  2A,W
072B:  BTFSS  03.0
072C:  GOTO   734
....................         { 
....................             output_low(led); // Ledi yak 
072D:  BCF    2C.0
072E:  MOVF   2C,W
072F:  BSF    03.5
0730:  MOVWF  07
0731:  BCF    03.5
0732:  BCF    07.0
....................         } else  
0733:  GOTO   73A
....................         { 
....................             output_high(led); // Ledi söndür 
0734:  BCF    2C.0
0735:  MOVF   2C,W
0736:  BSF    03.5
0737:  MOVWF  07
0738:  BCF    03.5
0739:  BSF    07.0
....................         } 
....................         delay_ms(500); 
073A:  MOVLW  02
073B:  MOVWF  2E
073C:  MOVLW  FA
073D:  MOVWF  3C
073E:  CALL   016
073F:  DECFSZ 2E,F
0740:  GOTO   73C
0741:  GOTO   649
....................     } 
....................      
.................... } 
0742:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
